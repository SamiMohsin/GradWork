#include "lvgl/lvgl.h"

/*******************************************************************************
 * Size: 30 px
 * Bpp: 2
 * Opts: 
 ******************************************************************************/

#ifndef LCDNOVA30PX
#define LCDNOVA30PX 1
#endif

#if LCDNOVA30PX

/*-----------------
 *    BITMAPS
 *----------------*/

/*Store the image of the glyphs*/
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {
    /* U+30 "0" */
    0xf, 0xd7, 0xff, 0xf2, 0xe4, 0x3f, 0xf8, 0x2d,
    0xa1, 0xff, 0xcb, 0x68, 0x87, 0xe7, 0xd2, 0xf0,
    0x7f, 0xf1, 0xd7, 0xaf, 0x48, 0x1a, 0x6, 0x4e,
    0xff, 0xfe, 0xc, 0x87, 0xc8, 0x67, 0x43, 0xff,
    0x98, 0xe8, 0x7f, 0xf6, 0x9d, 0xf, 0xfe, 0xd3,
    0xa1, 0xcf, 0x83, 0xff, 0xa4, 0xe8, 0x73, 0xa1,
    0xff, 0xd2, 0x74, 0x39, 0x90, 0xff, 0xe9, 0x32,
    0x1c, 0xc1, 0xff, 0xc2, 0x74, 0x33, 0xa1, 0xf3,
    0x7, 0x98, 0x33, 0xa1, 0x9d, 0x3, 0x75, 0x90,
    0xf9, 0x83, 0xcc, 0x1e, 0x6e, 0xb2, 0x13, 0x75,
    0x90, 0xf3, 0x7, 0x98, 0x3e, 0x6e, 0xb2, 0x7,
    0x43, 0x3a, 0x19, 0x83, 0xcc, 0x1f, 0x3a, 0x19,
    0xd0, 0xff, 0xe1, 0x30, 0x7a, 0x81, 0xff, 0xd3,
    0xa0, 0x7a, 0x43, 0xff, 0xa7, 0x21, 0xe9, 0xf,
    0xfe, 0x97, 0x21, 0xe9, 0xf, 0xfe, 0xdc, 0x87,
    0xff, 0x69, 0x90, 0xff, 0xe6, 0x34, 0xc, 0x87,
    0xcd, 0xff, 0xfc, 0x1b, 0x10, 0xce, 0x84, 0xfa,
    0x5e, 0xf, 0xfe, 0x3a, 0xf5, 0xe9, 0xf, 0x9a,
    0x21, 0xff, 0xcb, 0x68, 0x87, 0x80,

    /* U+31 "1" */
    0xf, 0xf9, 0xff, 0xfe, 0xd, 0x10, 0xff, 0xe8,
    0xb4, 0xf, 0xf2, 0xf6, 0x87, 0xff, 0x41, 0xa2,
    0x83, 0x2f, 0xc1, 0xff, 0xd6, 0x69, 0xfa, 0xc4,
    0x3f, 0xff, 0xe1, 0xff, 0xff, 0xf, 0xff, 0xf8,
    0x7f, 0xff, 0xc3, 0xff, 0xaa, 0xe8, 0x67, 0x43,
    0xff, 0xb6, 0xd6, 0xe4, 0x3f, 0xfb, 0x8d, 0x6e,
    0x43, 0xff, 0xb6, 0xe8, 0x67, 0x43, 0xff, 0xfe,
    0x1f, 0xff, 0xf0, 0xff, 0xff, 0x87, 0xff, 0xfc,
    0x3f, 0xe6, 0xff, 0xfe, 0x5, 0x88, 0x64, 0xef,
    0xff, 0xa8, 0x87, 0x37, 0x21, 0xff, 0xc0, 0x5e,
    0xa2, 0xf0, 0x7f, 0xca, 0xb8, 0x26, 0x88, 0x7f,
    0xf0, 0xde, 0x55, 0x10, 0xff, 0xe1, 0xb4, 0x0,

    /* U+32 "2" */
    0xf, 0xd7, 0xff, 0xf2, 0xe4, 0x3f, 0xf8, 0x4e,
    0x87, 0xff, 0x2d, 0xa2, 0x1f, 0xfc, 0x7, 0x94,
    0x1f, 0xfc, 0x75, 0xeb, 0xd2, 0x1f, 0xe6, 0x9f,
    0xff, 0xc7, 0xb1, 0xc, 0xe8, 0x7f, 0xff, 0xc3,
    0xff, 0xfe, 0x1f, 0xff, 0xf0, 0xff, 0xec, 0x5f,
    0xff, 0xca, 0x85, 0x1, 0xa2, 0x1e, 0x6d, 0xf,
    0xfe, 0x5a, 0x8f, 0x48, 0x73, 0xe9, 0x78, 0x3f,
    0xf8, 0xea, 0xb8, 0x3e, 0x68, 0x19, 0x3b, 0xff,
    0xf8, 0xf4, 0x43, 0xff, 0xfe, 0x1f, 0xff, 0xf0,
    0xff, 0xff, 0x87, 0xff, 0x7d, 0x3b, 0xff, 0xf9,
    0x94, 0x43, 0xf2, 0xfc, 0x1f, 0xfc, 0xc5, 0x5a,
    0x7, 0x5e, 0xf, 0xfe, 0x93, 0x20,

    /* U+33 "3" */
    0xf, 0x37, 0xff, 0xf5, 0x24, 0x3f, 0x32, 0x1f,
    0xfd, 0x46, 0x43, 0xe7, 0x94, 0x1f, 0xfd, 0x5,
    0x5a, 0x1f, 0xcd, 0x3f, 0xff, 0x88, 0x87, 0xf3,
    0x52, 0x1f, 0xfc, 0xe6, 0xf2, 0x1e, 0x6e, 0x43,
    0xff, 0x9c, 0xdc, 0x87, 0x9b, 0x90, 0xff, 0xe7,
    0x37, 0x21, 0xe6, 0xe4, 0x3f, 0xf9, 0xcd, 0xc8,
    0x79, 0xb9, 0xf, 0xfe, 0x83, 0xa1, 0xe6, 0xe4,
    0x3f, 0xfa, 0x6e, 0xbd, 0x72, 0x1f, 0xfd, 0x56,
    0x8b, 0xd7, 0xff, 0xf0, 0xe4, 0x3f, 0xf8, 0xad,
    0x10, 0xff, 0xe5, 0x34, 0x43, 0xff, 0x86, 0xdc,
    0xa0, 0xff, 0xe3, 0x2f, 0x5e, 0x90, 0xff, 0xe1,
    0x34, 0xff, 0xfe, 0x35, 0x88, 0x67, 0x43, 0xff,
    0xfe, 0x1f, 0xff, 0xf0, 0xff, 0xff, 0x87, 0xff,
    0xa1, 0xbf, 0xff, 0x9b, 0x62, 0x19, 0xd0, 0xcd,
    0xc8, 0x7f, 0xf3, 0x57, 0xaf, 0x48, 0x73, 0x44,
    0x3f, 0xfa, 0xd, 0x10, 0xf0,

    /* U+34 "4" */
    0xf, 0xfe, 0x83, 0x7f, 0xf5, 0x72, 0x1f, 0xfd,
    0x6, 0xe4, 0x3c, 0xd1, 0x7a, 0xd0, 0xff, 0xe5,
    0xb7, 0x21, 0xe6, 0xe4, 0x3f, 0x61, 0xff, 0xc8,
    0x6e, 0x43, 0xcd, 0xc8, 0x7f, 0xf4, 0x5b, 0x90,
    0xf3, 0x72, 0x1f, 0xfd, 0x16, 0xe4, 0x3c, 0xdc,
    0x87, 0xff, 0x45, 0xb9, 0xf, 0x37, 0x21, 0xff,
    0xd1, 0x6e, 0x43, 0xcd, 0xc8, 0x7f, 0xf4, 0xdd,
    0xf, 0x37, 0x21, 0xff, 0xd6, 0x75, 0xd4, 0xe4,
    0x3f, 0xfb, 0xf, 0x2e, 0xa7, 0xff, 0xf3, 0x25,
    0x81, 0x70, 0x66, 0x81, 0xff, 0xd5, 0x4f, 0x90,
    0xf3, 0x45, 0x83, 0xff, 0x9e, 0xb8, 0xbd, 0x21,
    0xf3, 0x57, 0xff, 0xf3, 0xe9, 0xa8, 0x26, 0x81,
    0xff, 0xff, 0xf, 0xff, 0xf8, 0x7f, 0xff, 0xc3,
    0xff, 0xfe, 0x1f, 0xff, 0xf1, 0xf, 0x61, 0xff,
    0xdb, 0x6e, 0x55, 0xa0,

    /* U+35 "5" */
    0x1a, 0x7f, 0xff, 0x5a, 0x40, 0xeb, 0xc1, 0xff,
    0xd0, 0x6e, 0x43, 0xcb, 0xf0, 0x7f, 0xf2, 0x15,
    0x72, 0x1f, 0xfc, 0x4, 0xef, 0xff, 0xe4, 0x51,
    0xf, 0xff, 0xf8, 0x7f, 0xff, 0xc3, 0xff, 0xfe,
    0x1f, 0xfd, 0x76, 0x88, 0x14, 0x5f, 0xff, 0xca,
    0x90, 0xff, 0x37, 0xca, 0xf, 0xfe, 0x5b, 0x44,
    0x3f, 0xf8, 0xf, 0x28, 0x3f, 0xf8, 0xeb, 0xd7,
    0xa4, 0x3f, 0xcd, 0x3f, 0xff, 0x8f, 0x62, 0x19,
    0xd0, 0xff, 0xff, 0x87, 0xff, 0xfc, 0x3f, 0xff,
    0xe1, 0xff, 0xd3, 0x69, 0xff, 0xfc, 0xcb, 0x10,
    0xce, 0x81, 0xa2, 0x83, 0xff, 0x98, 0xbd, 0x7a,
    0x42, 0x68, 0x1f, 0xfd, 0x6, 0x88, 0x78,

    /* U+36 "6" */
    0xf, 0xd7, 0xff, 0xf2, 0xe4, 0x3f, 0xf8, 0x2d,
    0xa1, 0xff, 0xcb, 0x68, 0x1f, 0xcf, 0xa5, 0xe0,
    0xff, 0xe3, 0xaa, 0xe0, 0xf9, 0xa0, 0x64, 0xef,
    0xff, 0xe3, 0xd1, 0xf, 0xff, 0xf8, 0x7f, 0xff,
    0xc3, 0xff, 0xfe, 0x1f, 0xfd, 0x86, 0x88, 0x14,
    0x5f, 0xff, 0xca, 0x90, 0xff, 0x37, 0xa, 0xf,
    0xfe, 0x5b, 0x44, 0x3f, 0x3e, 0x97, 0x83, 0xff,
    0x8e, 0xbd, 0x7a, 0x40, 0xd0, 0x32, 0x77, 0xff,
    0xf1, 0xec, 0x43, 0x3a, 0x1f, 0xff, 0xf0, 0xff,
    0xff, 0x87, 0xff, 0xfc, 0x3f, 0xfa, 0xd, 0x3,
    0x27, 0x7f, 0xff, 0x1e, 0xc4, 0x33, 0xa1, 0x3e,
    0x97, 0x83, 0xff, 0x8e, 0xbd, 0x7a, 0x43, 0xe6,
    0xd0, 0xff, 0xe5, 0xb4, 0x43, 0xc0,

    /* U+37 "7" */
    0x9, 0xbf, 0xff, 0xa9, 0x44, 0x26, 0x88, 0x7f,
    0xf4, 0x57, 0xb4, 0xd, 0x14, 0x1f, 0xfc, 0xc5,
    0xf8, 0x3f, 0x34, 0xff, 0xfe, 0x65, 0xa8, 0x3f,
    0xff, 0xe1, 0xff, 0xff, 0xf, 0xff, 0xf8, 0x7f,
    0xf5, 0x50, 0xff, 0xe5, 0xb7, 0xfd, 0x2c, 0x7,
    0x83, 0xff, 0x94, 0xd1, 0xf, 0xc9, 0xf4, 0x1f,
    0xfc, 0x9b, 0xd2, 0xf0, 0x4b, 0x51, 0xf, 0xfe,
    0x53, 0x21, 0x93, 0xbe, 0xa9, 0xf, 0xff, 0xf8,
    0x7f, 0xff, 0xc3, 0xff, 0xfe, 0x1f, 0xff, 0xf0,
    0xff, 0xe7, 0xa1, 0xff, 0xd4, 0x6e, 0x55, 0xc1,
    0xff, 0xc6,

    /* U+38 "8" */
    0xf, 0xd7, 0xff, 0xf2, 0xe4, 0x3f, 0xf8, 0x2d,
    0xa1, 0xff, 0xcb, 0x68, 0x87, 0xe7, 0xd2, 0xf0,
    0x7f, 0xf1, 0xd7, 0xaf, 0x48, 0x1a, 0x6, 0x4e,
    0xff, 0xfe, 0x3d, 0x88, 0x67, 0x43, 0xff, 0xfe,
    0x1f, 0xff, 0xf0, 0xff, 0xff, 0x87, 0xff, 0x41,
    0xa2, 0x5, 0x17, 0xff, 0xf2, 0x61, 0x40, 0x68,
    0x84, 0xdc, 0x28, 0x3f, 0xf9, 0x6a, 0x2e, 0x43,
    0x9f, 0x4b, 0xc1, 0xff, 0xc7, 0x5e, 0xbd, 0x20,
    0x68, 0x19, 0x3b, 0xff, 0xf8, 0xf6, 0x21, 0x9d,
    0xf, 0xff, 0xf8, 0x7f, 0xff, 0xc3, 0xff, 0xfe,
    0x1f, 0xfd, 0x6, 0x81, 0x93, 0xbf, 0xff, 0x8f,
    0x62, 0x19, 0xd0, 0x9f, 0x4b, 0xc1, 0xff, 0xc7,
    0x5e, 0xbd, 0x21, 0xf3, 0x68, 0x7f, 0xf2, 0xda,
    0x21, 0xe0,

    /* U+39 "9" */
    0xf, 0xd7, 0xff, 0xf2, 0xe4, 0x3f, 0xf8, 0x2d,
    0xa1, 0xff, 0xcb, 0x68, 0x87, 0xe7, 0xd2, 0xf0,
    0x7f, 0xf1, 0xd7, 0xaf, 0x48, 0x1a, 0x6, 0x4e,
    0xff, 0xfe, 0x3d, 0x88, 0x67, 0x43, 0xff, 0xfe,
    0x1f, 0xff, 0xf0, 0xff, 0xff, 0x87, 0xff, 0x41,
    0xa2, 0x5, 0x17, 0xff, 0xf2, 0x61, 0x40, 0x68,
    0x84, 0xdf, 0x28, 0x3f, 0xf9, 0x6a, 0x2e, 0x43,
    0xf9, 0xe5, 0x7, 0xff, 0x1d, 0x7a, 0xf4, 0x87,
    0xf9, 0xa7, 0xff, 0xf1, 0xec, 0x43, 0x3a, 0x1f,
    0xff, 0xf0, 0xff, 0xff, 0x87, 0xff, 0xfc, 0x3f,
    0xfb, 0xd, 0x3f, 0xff, 0x8f, 0x62, 0x19, 0xd0,
    0xf9, 0xe5, 0x7, 0xff, 0x1d, 0x7a, 0xf4, 0x87,
    0xe7, 0x43, 0xff, 0x96, 0xd1, 0xf, 0x0
};


/*---------------------
 *  GLYPH DESCRIPTION
 *--------------------*/

static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {
    {.bitmap_index = 0, .adv_w = 0, .box_w = 0, .box_h = 0, .ofs_x = 0, .ofs_y = 0} /* id = 0 reserved */,
    {.bitmap_index = 0, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 150, .adv_w = 252, .box_w = 48, .box_h = 23, .ofs_x = 0, .ofs_y = 0},
    {.bitmap_index = 246, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 340, .adv_w = 252, .box_w = 45, .box_h = 23, .ofs_x = 0, .ofs_y = 0},
    {.bitmap_index = 465, .adv_w = 252, .box_w = 48, .box_h = 23, .ofs_x = -1, .ofs_y = 0},
    {.bitmap_index = 581, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 676, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 778, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 860, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 966, .adv_w = 252, .box_w = 42, .box_h = 23, .ofs_x = 1, .ofs_y = 0}
};

/*---------------------
 *  CHARACTER MAPPING
 *--------------------*/



/*Collect the unicode lists and glyph_id offsets*/
static const lv_font_fmt_txt_cmap_t cmaps[] =
{
    {
        .range_start = 48, .range_length = 10, .glyph_id_start = 1,
        .unicode_list = NULL, .glyph_id_ofs_list = NULL, .list_length = 0, .type = LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY
    }
};



/*--------------------
 *  ALL CUSTOM DATA
 *--------------------*/

/*Store all the custom data of the font*/
static lv_font_fmt_txt_dsc_t font_dsc = {
    .glyph_bitmap = gylph_bitmap,
    .glyph_dsc = glyph_dsc,
    .cmaps = cmaps,
    .kern_dsc = NULL,
    .kern_scale = 0,
    .cmap_num = 1,
    .bpp = 2,
    .kern_classes = 0,
    .bitmap_format = 1
};


/*-----------------
 *  PUBLIC FONT
 *----------------*/

/*Initialize a public general font descriptor*/
lv_font_t LcdNova30px = {
    .get_glyph_dsc = lv_font_get_glyph_dsc_fmt_txt,    /*Function pointer to get glyph's data*/
    .get_glyph_bitmap = lv_font_get_bitmap_fmt_txt,    /*Function pointer to get glyph's bitmap*/
    .line_height = 23,          /*The maximum line height required by the font*/
    .base_line = 0,             /*Baseline measured from the bottom of the line*/
#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)
    .subpx = LV_FONT_SUBPX_HOR,
#endif
    .dsc = &font_dsc           /*The custom font data. Will be accessed by `get_glyph_bitmap/dsc` */
};

#endif /*#if LCDNOVA30PX*/

